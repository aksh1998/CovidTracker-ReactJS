{"version":3,"sources":["component/Cards/Cards.module.css","component/Cards/Cards.jsx","api/index.js","component/Chart/Chart.jsx","component/CountryPicker/CountryPicker.jsx","component/StatePicker/StatePicker.jsx","component/DistrictPicker/DistrictPicker.jsx","App.js","index.js","component/Chart/Chart.module.css","component/CountryPicker/CountryPicker.module.css","component/StatePicker/StatePicker.module.css","component/DistrictPicker/DistrictPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","varient","gutterBottom","start","end","value","duration","separator","Date","toDateString","recoverd","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","fetchStatesData","state","district","filter","d","fetchDistrictsName","districtData","fetchDistrictsData","DisplayChart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","piChart","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesApi","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","StatePicker","handleStateChange","fetchedStates","setFetchedStates","fetchStatesDataApi","console","log","State","DistrictPicker","districtList","handleDistrictChange","District","App","stateName","setState","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a5ff314.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1AoxY\",\"card\":\"Cards_card__2RKl2\",\"infected\":\"Cards_infected__3EBbR\",\"recoverd\":\"Cards_recoverd__3Aw3j\",\"deaths\":\"Cards_deaths__vyZVR\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport cx from \"classnames\";\r\nimport CountUp from \"react-countup\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return \"Loading...\";\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={4} justify=\"center\">\r\n                {confirmed\r\n                    ?\r\n                    <Grid\r\n                        item\r\n                        component={Card}\r\n                        xs={12}\r\n                        md={3}\r\n                        className={cx(styles.card, styles.infected)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textPrimary\" varient=\"h3\" gutterBottom>\r\n                                Infected\r\n                        </Typography>\r\n                            <Typography varient=\"h5\">\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={confirmed.value}\r\n                                    duration={3}\r\n                                    separator=\",\"\r\n                                />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                {lastUpdate ? new Date(lastUpdate).toDateString() : null}\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\" varient=\"h5\">\"Number of people being Infected so far\"</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    : null}\r\n                {recovered\r\n                    ?\r\n                    <Grid\r\n                        item\r\n                        component={Card}\r\n                        xs={12}\r\n                        md={3}\r\n                        className={cx(styles.card, styles.recoverd)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textPrimary\" varient=\"h3\" gutterBottom>\r\n                                Recovered\r\n                        </Typography>\r\n                            <Typography varient=\"h5\">\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={recovered.value}\r\n                                    duration={3}\r\n                                    separator=\",\"\r\n                                />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                {lastUpdate ? new Date(lastUpdate).toDateString() : null}\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\" varient=\"h5\">\"Number of people being Recovered so far\"</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    : null}\r\n\r\n                {deaths\r\n                    ?\r\n                    <Grid\r\n                        item\r\n                        component={Card}\r\n                        xs={12}\r\n                        md={3}\r\n                        className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textPrimary\" varient=\"h3\" gutterBottom>\r\n                                Deaths\r\n                        </Typography>\r\n                            <Typography varient=\"h5\">\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={deaths.value}\r\n                                    duration={3}\r\n                                    separator=\",\"\r\n                                />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                {lastUpdate ? new Date(lastUpdate).toDateString() : null}\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\" varient=\"h5\">\"Total number of death\"</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    : null}\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country && country !== 'global') {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchStatesData = async (state = \"\", district = \"\") => {\r\n    try {\r\n        const { data } = await axios.get(\"https://api.covidindiatracker.com/state_data.json\");\r\n        if (state && state !== \"\" && !district && district === \"\") {\r\n            const { confirmed, recovered, deaths } = data.filter((d) => d.state === state)[0];\r\n            const modifiedData = { confirmed: { value: confirmed }, recovered: { value: recovered }, deaths: { value: deaths } }\r\n            return modifiedData;\r\n        }\r\n        return data;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchDistrictsName = async (state = \"\") => {\r\n    try {\r\n        const { data } = await axios.get(\"https://api.covidindiatracker.com/state_data.json\");\r\n        if (state && state !== \"\") {\r\n            const { districtData } = data.filter((d) => d.state === state)[0];\r\n            return districtData.map((d) => d.name);\r\n        }\r\n        return null;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const fetchDistrictsData = async (state = \"\", district = \"\") => {\r\n    try {\r\n        const { data } = await axios.get(\"https://api.covidindiatracker.com/state_data.json\");\r\n        if (state && state !== \"\" && district && district !== \"\") {\r\n            const { districtData } = data.filter((d) => d.state === state)[0];\r\n            const { confirmed } = districtData.filter((d) => d.name === district)[0];\r\n            const modifiedData = { confirmed: { value: confirmed } }\r\n            return modifiedData;\r\n        }\r\n        return null;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar,Chart } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nconst DisplayChart = ({ data, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchApi();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n            (<Line data={{\r\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n                datasets: [\r\n                    {\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        fill: true\r\n                    },\r\n                ]\r\n            }} />) : null\r\n    );\r\n\r\n    const piChart = (\r\n        <PieChart\r\n            data={[\r\n                { title: (data.confirmed ? 'Infected' : ''), value: (data.confirmed ? data.confirmed.value : 0), color: '#E38627' },\r\n                { title: (data.recovered ? 'Recovered' : ''), value: (data.recovered ? data.recovered.value : null), color: '#C13C37' },\r\n                { title: (data.deaths ? 'Deaths' : ''), value: (data.deaths ? data.deaths.value : null), color: '#6A2135' },\r\n            ]}\r\n        />\r\n    )\r\n    // const piChart1 = (\r\n    //     <Chart\r\n    //         chartType=\"PieChart\"\r\n    //         loader={<div>Loading Chart</div>}\r\n    //         data={[\r\n    //             ['Language', 'Speakers (in millions)'],\r\n    //             [(data.confirmed ? 'Infected' : ''), (data.confirmed ? data.confirmed.value : 0)],\r\n    //             [(data.recovered ? 'Recovered' : ''), (data.recovered ? data.recovered.value : null)],\r\n    //             [(data.deaths ? 'Deaths' : ''), (data.deaths ? data.deaths.value : null)],\r\n    //         ]}\r\n    //         options={{\r\n    //             title: 'Indian Language Use',\r\n    //             legend: 'none',\r\n    //             pieSliceText: 'label',\r\n    //             slices: {\r\n    //                 4: { offset: 0.2 },\r\n    //                 12: { offset: 0.3 },\r\n    //                 14: { offset: 0.4 },\r\n    //                 15: { offset: 0.5 },\r\n    //             },\r\n    //         }}\r\n    //         rootProps={{ 'data-testid': '5' }}\r\n    //     />\r\n    // )\r\n    const barChart = (\r\n        data.confirmed\r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: [(data.confirmed ? 'Infected' : ''), (data.recovered ? 'Recovered' : ''), (data.deaths ? 'Deaths' : '')],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: ['blue', 'green', 'red'],\r\n                            data: [(data.confirmed ? data.confirmed.value : 0), (data.recovered ? data.recovered.value : null), (data.deaths ? data.deaths.value : null)]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}` },\r\n                    }}\r\n                />\r\n            ) : null\r\n    )\r\n    return (\r\n        <div className={styles.container}>\r\n            {(country && country !== 'global') ? piChart : lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayChart;","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesApi = async () => {\r\n            setFetchedCountries(await fetchCountries())\r\n        };\r\n        fetchCountriesApi();\r\n    }, [setFetchedCountries]);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"global\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './StatePicker.module.css';\r\n\r\nimport { fetchStatesData } from '../../api';\r\n\r\nconst StatePicker = ({ handleStateChange }) => {\r\n    const [fetchedStates, setFetchedStates] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchStatesDataApi = async () => {\r\n            setFetchedStates(await fetchStatesData());\r\n        };\r\n        fetchStatesDataApi();\r\n        console.log(fetchedStates);\r\n    }, [setFetchedStates]);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleStateChange(e.target.value)}>\r\n                <option value=\"\">------</option>\r\n                {fetchedStates.map((State, i) => <option key={i} value={State.state}>{State.state}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default StatePicker;","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './DistrictPicker.module.css';\r\n\r\nimport { fetchDistrictsName } from '../../api';\r\n\r\nconst DistrictPicker = ({ districtList, handleDistrictChange }) => {\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleDistrictChange(e.target.value)}>\r\n                <option value=\"\">------</option>\r\n                {districtList.map((District, i) => <option key={i} value={District}>{District}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default DistrictPicker;","import './App.css';\nimport React from 'react';\nimport { Cards, DisplayChart, CountryPicker, StatePicker, DistrictPicker } from './component';\nimport styles from './App.module.css';\nimport { fetchData, fetchStatesData, fetchDistrictsData, fetchDistrictsName } from './api';\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n    stateName: '',\n    districtList: [],\n    district: ''\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data: data, country: country, stateName: '', district: '' });\n  }\n\n  handleStateChange = async (stateName) => {\n    const data = await fetchStatesData(stateName);\n    this.setState({ data: data, stateName: stateName, districtList: await fetchDistrictsName(stateName) });\n  }\n  handleDistrictChange = async (district) => {\n    const data = await fetchDistrictsData(this.state.stateName, district);\n    this.setState({ data: data, district: district });\n  }\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        {country === 'India' ? <StatePicker handleStateChange={this.handleStateChange} /> : null}\n        {this.state.stateName ? <DistrictPicker districtList={this.state.districtList} handleDistrictChange={this.handleDistrictChange} /> : null}\n        <DisplayChart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__29d7Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1qNcG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"StatePicker_formControl__1irNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"DistrictPicker_formControl__14sJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3D7d9\"};"],"sourceRoot":""}